<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>{{title}}</title>
  <script src="https://unpkg.com/force-graph"></script>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap"
    rel="stylesheet">
  <link
    href="https://fonts.googleapis.com/css2?family=Ubuntu+Mono:ital,wght@0,400;0,700;1,400;1,700&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap"
    rel="stylesheet">
  <style>
    html, body, #container, #graph-container {
      height: 100%;
      width: 100%;
    }
    body {
      margin: 0;
      /* prevent scrollbars */
      overflow: hidden;
      font-family: "Ubuntu";
    }
    #container {
      position: relative;
    }
    #controls {
      width: 340px;
      position: absolute;
      top: 10px;
      right: 16px;
      border: 1px dashed gray;
      background: rgba(255, 255, 255, 0.5);
      padding: 6px;
    }
    .control__setting {
      display: flex;
      align-items: center;
      margin-bottom: 4px;
    }
    #controls input[type="range"] {
      width: 100%;
    }
    #controls input[type="text"] {
      width: 100%;
      font-family: "Ubuntu";
    }
    .control__label {
      font-size: 10px;
      min-width: 100px;
    }
  </style>
</head>

<body>
  <div id="container">
    <div id="graph-container"></div>
    <div id="controls">
      <div class="control__setting">
        <span class="control__label">Node threshold</span>
        <input type="range" min="1" max="1000" value="10" class="slider" id="node-threshold-slider">
      </div>
      <div class="control__setting">
        <span class="control__label">Link threshold</span>
        <input type="range" min="1" max="100" value="10" class="slider" id="link-threshold-slider">
      </div>
      <div class="control__setting">
        <span class="control__label">Start date</span>
        <input type="range" min="0" max="100" value="0" class="slider" id="start-date-slider">
      </div>
      <div class="control__setting">
        <span class="control__label">End date</span>
        <input type="range" min="0" max="100" value="100" class="slider" id="end-date-slider">
      </div>
      <div class="control__setting">
        <input type="checkbox" checked id="approvedOnlyCheckbox">
        <span class="control__label">Approvals only</span>
        <input type="checkbox" id="spanningForestCheckbox">
        <span class="control__label">Spanning forest</span>
      </div>
      <div class="control__setting">
        <input type="text" placeholder="find" id="findTextbox">
      </div>
    </div>
  </div>

  <script>
    // TODO: use map based encoding to save space
    const data_raw = [
      {% for item in data_model -%}
          ["{{item.reviewer}}", "{{item.reviewee}}", "{{item.timestamp}}", {{ 'true' if item.has_approved else 'false' }}],
      {% endfor %}
    ];

    // post-load processing
    const data = [];
    data_raw.forEach(([reviewer, reviewee, timestamp_str, has_approved]) => {
      const timestamp = new Date(timestamp_str);
      data.push({ reviewer, reviewee, timestamp, has_approved });
    });
  </script>

  <script>
    const defaultColor = "#3777de";
    const highlightColor = "#e25548";
    const accentColor = "#7a18d6";

    const graphContainer = document.getElementById("graph-container");
    const myGraph = ForceGraph();

    let canvas = null;
    let scale = 1.0;

    function ensureCanvas() {
      if (!canvas) {
        canvas = document.querySelector(`#graph-container canvas`);
      }
    }

    function estimateScale() {
      // scale = myGraph.screen2GraphCoords(1, 0).x - myGraph.screen2GraphCoords(0, 0).x;
      // return Math.sqrt(scale);
      ensureCanvas();
      return Math.sqrt(1.0 / canvas.__zoom.k);
    }

    function updateCurrentScale() {
      scale = estimateScale();
      requestAnimationFrame(updateCurrentScale);
    }
    requestAnimationFrame(updateCurrentScale);

    myGraph(graphContainer)
      .linkWidth((link) => {
        return Math.min(10, Math.max(0.5, Math.log(link.count, 2) - 2));
      })
      .linkColor((link) => {
        if (link.isAccented) {
          return accentColor;
        } else {
          return link.color;
        }
      })
      .linkDirectionalArrowLength((link) => {
        return Math.min(10, Math.max(0.5, Math.log(link.count, 2) - 2));
      })
      .linkDirectionalArrowRelPos(0.7)
      .linkDirectionalParticleWidth((link) => {
        // make particle smaller when zooming in maintaining relative size
        // same as the line itself
        return scale * 6.0;
      })
      .nodeCanvasObject((node, ctx, globalScale) => {
        const label = node.id;
        const totalCount = node.review_given + node.review_received;
        const fontSizeExtra = Math.log(totalCount, 2);
        const fontSize = (10 + fontSizeExtra) / globalScale;

        if (node.isHighlighted) {
          ctx.font = `bold ${fontSize}px Ubuntu`;
        } else if (node.isAccented) {
          ctx.font = `bold ${fontSize}px Ubuntu`;
        } else {
          ctx.font = `${fontSize}px Ubuntu`;
        }

        const textWidth = ctx.measureText(label).width;
        const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding

        ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
        ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);

        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';

        if (node.isHighlighted) {
          ctx.fillStyle = highlightColor;
        } else if (node.isAccented) {
          ctx.fillStyle = accentColor;
        } else {
          ctx.fillStyle = node.color;
        }

        ctx.fillText(label, node.x, node.y);

        node.__bckgDimensions = bckgDimensions; // to re-use in nodePointerAreaPaint
      })
      .nodePointerAreaPaint((node, color, ctx) => {
        ctx.fillStyle = color;
        const bckgDimensions = node.__bckgDimensions;
        bckgDimensions && ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);
      });

    function handleResize() {
      const clientWidth = graphContainer.clientWidth;
      const clientHeight = graphContainer.clientHeight;

      myGraph.width(clientWidth);
      myGraph.height(clientHeight);
    }

    // handle resize
    window.addEventListener('resize', handleResize);
  </script>

  <script>
    const nodeSliderElement = document.getElementById("node-threshold-slider");
    const linkSliderElement = document.getElementById("link-threshold-slider");
    const startDateSliderElement = document.getElementById("start-date-slider");
    const endDateSliderElement = document.getElementById("end-date-slider");
    const approvedOnlyCheckboxElement = document.getElementById("approvedOnlyCheckbox");
    const findTextboxElement = document.getElementById("findTextbox");
    const spanningForestCheckboxElement = document.getElementById("spanningForestCheckbox");

    function interpolateDate(date1, date2, factor) {
      const time1 = date1.getTime();
      const time2 = date2.getTime();
      const interpolatedTime = time1 + (time2 - time1) * factor;
      return new Date(interpolatedTime);
    }

    function findMinMaxDates(data) {
        if (!data || data.length === 0) {
          return { min: null, max: null };
        }

        let minDate = new Date(data[0].timestamp);
        let maxDate = new Date(data[0].timestamp);

        for (let i = 1; i < data.length; i++) {
          const currentDate = new Date(data[i].timestamp);
          if (currentDate < minDate) {
            minDate = currentDate;
          }
          if (currentDate > maxDate) {
            maxDate = currentDate;
          }
        }

        return { min: minDate, max: maxDate };
      }

    function aggregateReviews() {
      const linkMap = new Map();
      const nodesMap = new Map();

      const dateRange = findMinMaxDates(data);
      const startThresholdFactor = parseFloat(startDateSliderElement.value) / parseFloat(startDateSliderElement.max);
      const startThreshold = interpolateDate(dateRange.min, dateRange.max, startThresholdFactor);
      const endThresholdFactor = parseFloat(endDateSliderElement.value) / parseFloat(endDateSliderElement.max);
      const endThreshold = interpolateDate(dateRange.min, dateRange.max, endThresholdFactor);
      const approvedOnly = approvedOnlyCheckboxElement.checked;

      console.log(`date range: [${startThreshold}, ${endThreshold}]`);

      data.forEach(({ reviewer, reviewee, timestamp, has_approved }) => {
        const linkId = `${reviewer} :: ${reviewee}`;

        if (timestamp < startThreshold || timestamp > endThreshold) {
          return;
        }

        if (approvedOnly && !has_approved) {
          return;
        }

        if (!nodesMap.has(reviewer)) {
          nodesMap.set(reviewer, {
            id: reviewer,
            review_given: 0,
            review_received: 0,
            color: defaultColor,
          });
        }

        if (!nodesMap.has(reviewee)) {
          nodesMap.set(reviewee, {
            id: reviewee,
            review_given: 0,
            review_received: 0,
            color: defaultColor,
          });
        }

        nodesMap.get(reviewer).review_given += 1;
        nodesMap.get(reviewee).review_received += 1;

        if (!linkMap.has(linkId)) {
          linkMap.set(linkId, {
            id: linkId,
            source: nodesMap.get(reviewer),
            target: nodesMap.get(reviewee),
            count: 0,
          });
        }

        linkMap.get(linkId).count += 1;
      });

      return {
        links: Array.from(linkMap.values()),
        nodes: Array.from(nodesMap.values()),
      }
    }

    function filterNodes(graphData, nodeCountThreshold) {
      const filteredNodes = graphData.nodes.filter(node => {
        return (node.review_given + node.review_received) >= nodeCountThreshold;
      });

      const nodeIds = new Set(filteredNodes.map(node => node.id));

      // make sure we only leave links which point to existing nodes
      const filteredLinks = graphData.links.filter(link => {
        return nodeIds.has(link.source.id) && nodeIds.has(link.target.id);
      });

      return {
        nodes: filteredNodes,
        links: filteredLinks,
      }
    }

    function filterLinks(graphData, linkCountThreshold) {
      const filteredLinks = graphData.links.filter(link => {
        return link.count >= linkCountThreshold;
      });

      return {
        nodes: graphData.nodes,
        links: filteredLinks,
      }
    }

    // never delets an object from the pool allowing force graph to
    // maintain its state and redraw nicely
    function poolObjects(array, poolMap, identityFunc) {
      let result = [];
      array.forEach((item) => {
        const identity = identityFunc(item);
        if (poolMap.has(identity)) {
          Object.assign(poolMap.get(identity), item);
        } else {
          poolMap.set(identity, item);
        }
        result.push(poolMap.get(identity));
      });
      return result;
    }

    // maintains objects identity in the graph data, so that graph can change
    // w/o full redraw
    const nodesPoolMap = new Map();

    function poolGraphData(graphData) {
      const pooledNodes = poolObjects(graphData.nodes, nodesPoolMap, x => x.id);

      // replace references inside the links to point to pool objects
      const remappedLinks = [];
      graphData.links.forEach((link) => {
        let linkClone = structuredClone(link);
        linkClone.source = nodesPoolMap.get(linkClone.source.id);
        linkClone.target = nodesPoolMap.get(linkClone.target.id);
        remappedLinks.push(linkClone);
      });

      return {
        nodes: pooledNodes,
        links: remappedLinks,
      };
    }

    function handleSearch(graphData) {
      const searchText = findTextboxElement.value.toLowerCase();
      const matchingNodes = [];
      graphData.nodes.forEach((node) => {
        if (searchText && node.id.toLowerCase().includes(searchText)) {
          node.isHighlighted = true;
          matchingNodes.push(node);
        } else {
          node.isHighlighted = false;
        }
      });
      return matchingNodes;
    }

    // implements Kruskal algorithm to find spanning forest
    function findSpanningForest(graphData) {
      // disjoint set house-keeping
      const parentMap = new Map();

      // init parents map
      graphData.nodes.forEach((node) => {
        parentMap.set(node.id, node.id);
      })

      function ultimateParent(node) {
        parent = parentMap.get(node);
        while (parentMap.get(parent) != parent) {
          parent = parentMap.get(parent);
        }
        parentMap.set(node, parent);
        return parent;
      }

      function union(node1, node2) {
        node1Parent = ultimateParent(node1);
        node2Parent = ultimateParent(node2);
        parentMap.set(node2Parent, node1Parent);
      }

      const spanningTreeLinks = [];

      // sort by link weight descending
      const sortedLinks = graphData.links.sort((a, b) => b.count - a.count);

      sortedLinks.forEach((link) => {
        const sourceParent = ultimateParent(link.source.id);
        const targetParent = ultimateParent(link.target.id);
        if (sourceParent != targetParent) {
          spanningTreeLinks.push(link);
          union(sourceParent, targetParent);
        }
      });

      return {
        nodes: graphData.nodes,
        links: spanningTreeLinks,
      }
    }

    function arrayToMap(elements) {
      const map = new Map();
      elements.forEach((element) => {
        map.set(element.id, element)
      });
      return map;
    }

    function mergeLinks(graphDataMain, graphDataExtra) {
      const resultLinks = structuredClone(graphDataMain.links);
      const mainLinksMap = arrayToMap(graphDataMain.links);
      graphDataExtra.links.forEach((link) => {
        if (!mainLinksMap.has(link.id)) {
          resultLinks.push(link);
        }
      });
      return {
        nodes: graphDataMain.nodes,
        links: resultLinks,
      }
    }

    function recompute() {
      console.log('recomputing...');
      const nodeThresholdValue = parseFloat(nodeSliderElement.value);
      const linkThresholdValue = parseFloat(linkSliderElement.value);

      // handle time range filters, aggregate the counts
      let graphData = aggregateReviews();

      graphData = filterNodes(graphData, nodeThresholdValue);

      if (spanningForestCheckboxElement.checked) {
        const spanningTreeData = findSpanningForest(graphData);

        spanningTreeData.links.forEach((link) => {
          link.color = defaultColor;
        });

        const filteredTreeData = filterLinks(graphData, linkThresholdValue);
        graphData = mergeLinks(spanningTreeData, filteredTreeData);
      } else {
        graphData = filterLinks(graphData, linkThresholdValue);
      }

      const matchingNodesMap = arrayToMap(handleSearch(graphData));

      graphData = poolGraphData(graphData);

      console.log(`nodes: ${graphData.nodes.length}, links: ${graphData.links.length}`);

      myGraph.graphData(graphData);

      // zoom to the matching node(s)
      const zoomAnimationLenMs = 1000;
      if (matchingNodesMap.size === 1) {
        const matchingNodeId = matchingNodesMap.keys().next().value;
        myGraph.graphData().nodes.forEach((node) => {
          if (node.id === matchingNodeId) {
            myGraph.centerAt(node.x, node.y, zoomAnimationLenMs);
          }
        });
      }
      // else if (matchingNodesMap.size > 1) {
      //  myGraph.zoomToFit(zoomAnimationLenMs, 10, (node) => matchingNodesMap.has(node.id));
      // }
    }

    function debounce(func, delay) {
      let timeoutId;
      return function (...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
          func.apply(this, args);
        }, delay);
      };
    }

    const debouncedRecompute = debounce(recompute, 100);

    // input handling event handlers
    nodeSliderElement.oninput = (event) => debouncedRecompute();
    linkSliderElement.oninput = (event) => debouncedRecompute();
    startDateSliderElement.oninput = (event) => debouncedRecompute();
    endDateSliderElement.oninput = (event) => debouncedRecompute();
    approvedOnlyCheckboxElement.onchange = (event) => debouncedRecompute();
    spanningForestCheckboxElement.onchange = (event) => debouncedRecompute();
    findTextboxElement.oninput = (event) => debouncedRecompute();

    // handle initial state
    document.addEventListener('DOMContentLoaded', () => recompute());
  </script>

  <script>
    // update limits on filter sliders for node and links thresholds
    document.addEventListener('DOMContentLoaded', () => {
      const aggregated = aggregateReviews();
      const maxNodeThreshold = Math.max(...aggregated.nodes.map(node => node.review_given + node.review_received));
      const maxLinkThreshold = Math.max(...aggregated.links.map(link => link.count));
      nodeSliderElement.max = maxNodeThreshold;
      linkSliderElement.max = maxLinkThreshold;
    });
  </script>

  <script>
    // dragging support
    let isDragStartHandled = false;

    function getNeighbors(nodeId) {
      let neighborsIds = new Set();
      let linkIds = new Set();
      const graphData = myGraph.graphData();
      graphData.links.forEach((link) => {
        if (link.source.id == nodeId) {
          neighborsIds.add(link.target.id);
          linkIds.add(link.id);
        }
        if (link.target.id == nodeId) {
          neighborsIds.add(link.source.id);
          linkIds.add(link.id);
        }
      });
      return {
        nodes: neighborsIds,
        links: linkIds,
      }
    }

    myGraph.onNodeDrag((node, event) => {
      if (isDragStartHandled) {
        return;
      }
      isDragStartHandled = true;

      node.isAccented = true;

      const neighbors = getNeighbors(node.id);
      const graphData = myGraph.graphData();

      graphData.nodes.forEach((node) => {
        if (neighbors.nodes.has(node.id)) {
          node.isAccented = true;
        }
      });

      graphData.links.forEach((link) => {
        if (neighbors.links.has(link.id)) {
          link.isAccented = true;
          myGraph.emitParticle(link);
        }
      });
    });

    myGraph.onNodeDragEnd((node, event) => {
      isDragStartHandled = false;
      const graphData = myGraph.graphData();
      graphData.nodes.forEach((node) => {
        node.isAccented = false;
      });
      graphData.links.forEach((link) => {
        link.isAccented = false;
      });
    });
  </script>
</body>
</html>
